
AVRASM ver. 2.1.30  C:\Users\luis_\OneDrive\Escritorio\Tec de Monterrey 2\Semestre 4\Diseño de Sistemas en Chip\Practicas\Practica 5. Reproductor de Melodias\Debug\List\ReproductorMel.asm Tue Apr 27 13:05:12 2021

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega2560
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 2048 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega2560
                 	#pragma AVRPART MEMORY PROG_FLASH 262144
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU RAMPZ=0x3B
                 	.EQU EIND=0x3C
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x74
                 	.EQU XMCRB=0x75
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0200
                 	.EQU __SRAM_END=0x21FF
                 	.EQU __DSTACK_SIZE=0x0800
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0143 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0000 	JMP  0x00
00004a 940c 0000 	JMP  0x00
00004c 940c 0000 	JMP  0x00
00004e 940c 0000 	JMP  0x00
000050 940c 0000 	JMP  0x00
000052 940c 0000 	JMP  0x00
000054 940c 0000 	JMP  0x00
000056 940c 0000 	JMP  0x00
000058 940c 0000 	JMP  0x00
00005a 940c 0000 	JMP  0x00
00005c 940c 0000 	JMP  0x00
00005e 940c 0000 	JMP  0x00
000060 940c 0000 	JMP  0x00
000062 940c 0000 	JMP  0x00
000064 940c 0000 	JMP  0x00
000066 940c 0000 	JMP  0x00
000068 940c 0000 	JMP  0x00
00006a 940c 0000 	JMP  0x00
00006c 940c 0000 	JMP  0x00
00006e 940c 0000 	JMP  0x00
000070 940c 0000 	JMP  0x00
                 
                 _0x3:
000072 014a
000073 0004
000074 014a
000075 0004      	.DB  0x4A,0x1,0x4,0x0,0x4A,0x1,0x4,0x0
000076 015d
000077 0004
000078 0188
000079 0004      	.DB  0x5D,0x1,0x4,0x0,0x88,0x1,0x4,0x0
00007a 0188
00007b 0004
00007c 015d
00007d 0004      	.DB  0x88,0x1,0x4,0x0,0x5D,0x1,0x4,0x0
00007e 014a
00007f 0004
000080 0126
000081 0004      	.DB  0x4A,0x1,0x4,0x0,0x26,0x1,0x4,0x0
000082 0106
000083 0004
000084 0106
000085 0004      	.DB  0x6,0x1,0x4,0x0,0x6,0x1,0x4,0x0
000086 0126
000087 0004
000088 014a
000089 0004      	.DB  0x26,0x1,0x4,0x0,0x4A,0x1,0x4,0x0
00008a 014a
00008b fffc
00008c 0126
00008d 0008      	.DB  0x4A,0x1,0xFC,0xFF,0x26,0x1,0x8,0x0
00008e 0126
00008f 0002
000090 014a
000091 0004      	.DB  0x26,0x1,0x2,0x0,0x4A,0x1,0x4,0x0
000092 014a
000093 0004
000094 015d
000095 0004      	.DB  0x4A,0x1,0x4,0x0,0x5D,0x1,0x4,0x0
000096 0188
000097 0004
000098 0188
000099 0004      	.DB  0x88,0x1,0x4,0x0,0x88,0x1,0x4,0x0
00009a 015d
00009b 0004
00009c 014a
00009d 0004      	.DB  0x5D,0x1,0x4,0x0,0x4A,0x1,0x4,0x0
00009e 0126
00009f 0004
0000a0 0106
0000a1 0004      	.DB  0x26,0x1,0x4,0x0,0x6,0x1,0x4,0x0
0000a2 0106
0000a3 0004
0000a4 0126
0000a5 0004      	.DB  0x6,0x1,0x4,0x0,0x26,0x1,0x4,0x0
0000a6 014a
0000a7 0004
0000a8 0126
0000a9 fffc      	.DB  0x4A,0x1,0x4,0x0,0x26,0x1,0xFC,0xFF
0000aa 0106
0000ab 0008
0000ac 0106
0000ad 0002      	.DB  0x6,0x1,0x8,0x0,0x6,0x1,0x2,0x0
0000ae 0126
0000af 0004
0000b0 0126
0000b1 0004      	.DB  0x26,0x1,0x4,0x0,0x26,0x1,0x4,0x0
0000b2 014a
0000b3 0004
0000b4 0106
0000b5 0004      	.DB  0x4A,0x1,0x4,0x0,0x6,0x1,0x4,0x0
0000b6 0126
0000b7 0004
0000b8 014a
0000b9 0008      	.DB  0x26,0x1,0x4,0x0,0x4A,0x1,0x8,0x0
0000ba 015d
0000bb 0008
0000bc 014a
0000bd 0004      	.DB  0x5D,0x1,0x8,0x0,0x4A,0x1,0x4,0x0
0000be 0106
0000bf 0004
0000c0 0126
0000c1 0004      	.DB  0x6,0x1,0x4,0x0,0x26,0x1,0x4,0x0
0000c2 014a
0000c3 0008
0000c4 015d
0000c5 0008      	.DB  0x4A,0x1,0x8,0x0,0x5D,0x1,0x8,0x0
0000c6 014a
0000c7 0004
0000c8 0126
0000c9 0004      	.DB  0x4A,0x1,0x4,0x0,0x26,0x1,0x4,0x0
0000ca 0106
0000cb 0004
0000cc 0126
0000cd 0004      	.DB  0x6,0x1,0x4,0x0,0x26,0x1,0x4,0x0
0000ce 00c4
0000cf 0002
0000d0 014a
0000d1 0004      	.DB  0xC4,0x0,0x2,0x0,0x4A,0x1,0x4,0x0
0000d2 014a
0000d3 0004
0000d4 015d
0000d5 0004      	.DB  0x4A,0x1,0x4,0x0,0x5D,0x1,0x4,0x0
0000d6 0188
0000d7 0004
0000d8 0188
0000d9 0004      	.DB  0x88,0x1,0x4,0x0,0x88,0x1,0x4,0x0
0000da 015d
0000db 0004
0000dc 014a
0000dd 0004      	.DB  0x5D,0x1,0x4,0x0,0x4A,0x1,0x4,0x0
0000de 0126
0000df 0004
0000e0 0106
0000e1 0004      	.DB  0x26,0x1,0x4,0x0,0x6,0x1,0x4,0x0
0000e2 0106
0000e3 0004
0000e4 0126
0000e5 0004      	.DB  0x6,0x1,0x4,0x0,0x26,0x1,0x4,0x0
0000e6 014a
0000e7 0004
0000e8 0126
0000e9 fffc      	.DB  0x4A,0x1,0x4,0x0,0x26,0x1,0xFC,0xFF
0000ea 0106
0000eb 0008
0000ec 0106
C:\Users\luis_\OneDrive\Escritorio\Tec de Monterrey 2\Semestre 4\Diseño de Sistemas en Chip\Practicas\Practica 5. Reproductor de Melodias\Debug\List\ReproductorMel.asm(1192): warning: .cseg .db misalignment - padding zero byte
0000ed 0002      	.DB  0x6,0x1,0x8,0x0,0x6,0x1,0x2
                 _0x4:
0000ee 01ee
0000ef 0010
0000f0 03dc
0000f1 0010      	.DB  0xEE,0x1,0x10,0x0,0xDC,0x3,0x10,0x0
0000f2 02e4
0000f3 0010
0000f4 026e
0000f5 0010      	.DB  0xE4,0x2,0x10,0x0,0x6E,0x2,0x10,0x0
0000f6 03dc
0000f7 0020
0000f8 02e4
0000f9 fff0      	.DB  0xDC,0x3,0x20,0x0,0xE4,0x2,0xF0,0xFF
0000fa 026e
0000fb 0008
0000fc 020b
0000fd 0010      	.DB  0x6E,0x2,0x8,0x0,0xB,0x2,0x10,0x0
0000fe 0417
0000ff 0010
000100 0620
000101 0010      	.DB  0x17,0x4,0x10,0x0,0x20,0x6,0x10,0x0
000102 0527
000103 0010
000104 0417
000105 0020      	.DB  0x27,0x5,0x10,0x0,0x17,0x4,0x20,0x0
000106 0620
000107 fff0
000108 0527
000109 0008      	.DB  0x20,0x6,0xF0,0xFF,0x27,0x5,0x8,0x0
00010a 01ee
00010b 0010
00010c 03dc
00010d 0010      	.DB  0xEE,0x1,0x10,0x0,0xDC,0x3,0x10,0x0
00010e 02e4
00010f 0010
000110 026e
000111 0010      	.DB  0xE4,0x2,0x10,0x0,0x6E,0x2,0x10,0x0
000112 03dc
000113 0020
000114 02e4
000115 fff0      	.DB  0xDC,0x3,0x20,0x0,0xE4,0x2,0xF0,0xFF
000116 026e
000117 0008
000118 026e
000119 0020      	.DB  0x6E,0x2,0x8,0x0,0x6E,0x2,0x20,0x0
00011a 0293
00011b 0020
00011c 02ba
00011d 0020      	.DB  0x93,0x2,0x20,0x0,0xBA,0x2,0x20,0x0
00011e 02ba
00011f 0020
000120 02e4
000121 0020      	.DB  0xBA,0x2,0x20,0x0,0xE4,0x2,0x20,0x0
000122 0310
000123 0020
000124 0310
000125 0020      	.DB  0x10,0x3,0x20,0x0,0x10,0x3,0x20,0x0
000126 033f
000127 0020
000128 0370
000129 0010      	.DB  0x3F,0x3,0x20,0x0,0x70,0x3,0x10,0x0
00012a 03dc
C:\Users\luis_\OneDrive\Escritorio\Tec de Monterrey 2\Semestre 4\Diseño de Sistemas en Chip\Practicas\Practica 5. Reproductor de Melodias\Debug\List\ReproductorMel.asm(1209): warning: .cseg .db misalignment - padding zero byte
00012b 0008      	.DB  0xDC,0x3,0x8
                 _0x5:
C:\Users\luis_\OneDrive\Escritorio\Tec de Monterrey 2\Semestre 4\Diseño de Sistemas en Chip\Practicas\Practica 5. Reproductor de Melodias\Debug\List\ReproductorMel.asm(1211): warning: .cseg .db misalignment - padding zero byte
00012c 003e      	.DB  0x3E
                 _0x6:
C:\Users\luis_\OneDrive\Escritorio\Tec de Monterrey 2\Semestre 4\Diseño de Sistemas en Chip\Practicas\Practica 5. Reproductor de Melodias\Debug\List\ReproductorMel.asm(1213): warning: .cseg .db misalignment - padding zero byte
00012d 001f      	.DB  0x1F
                 _0x7:
00012e 0839      	.DB  0x39,0x8
                 _0x8:
00012f 08ee      	.DB  0xEE,0x8
                 
                 __GLOBAL_INI_TBL:
000130 00f7      	.DW  0xF7
000131 0a00      	.DW  _melody
000132 00e4      	.DW  _0x3*2
                 
000133 007b      	.DW  0x7B
000134 0af8      	.DW  _melody2
000135 01dc      	.DW  _0x4*2
                 
000136 0001      	.DW  0x01
000137 0b74      	.DW  _notes
000138 0258      	.DW  _0x5*2
                 
000139 0001      	.DW  0x01
00013a 0b76      	.DW  _notes2
00013b 025a      	.DW  _0x6*2
                 
00013c 0002      	.DW  0x02
00013d 0b78      	.DW  _wholenote
00013e 025c      	.DW  _0x7*2
                 
00013f 0002      	.DW  0x02
000140 0b7a      	.DW  _wholenote2
000141 025e      	.DW  _0x8*2
                 
                 _0xFFFFFFFF:
000142 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000143 94f8      	CLI
000144 27ee      	CLR  R30
000145 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000146 e0f1      	LDI  R31,1
000147 bff5      	OUT  MCUCR,R31
000148 bfe5      	OUT  MCUCR,R30
000149 93e0 0074 	STS  XMCRA,R30
00014b 93e0 0075 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00014d e08d      	LDI  R24,(14-2)+1
00014e e0a2      	LDI  R26,2
00014f 27bb      	CLR  R27
                 __CLEAR_REG:
000150 93ed      	ST   X+,R30
000151 958a      	DEC  R24
000152 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000153 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000154 e290      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000155 e0a0      	LDI  R26,LOW(__SRAM_START)
000156 e0b2      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000157 93ed      	ST   X+,R30
000158 9701      	SBIW R24,1
000159 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00015a e6e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00015b e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00015c 9185      	LPM  R24,Z+
00015d 9195      	LPM  R25,Z+
00015e 9700      	SBIW R24,0
00015f f061      	BREQ __GLOBAL_INI_END
000160 91a5      	LPM  R26,Z+
000161 91b5      	LPM  R27,Z+
000162 9005      	LPM  R0,Z+
000163 9015      	LPM  R1,Z+
000164 01bf      	MOVW R22,R30
000165 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000166 9005      	LPM  R0,Z+
000167 920d      	ST   X+,R0
000168 9701      	SBIW R24,1
000169 f7e1      	BRNE __GLOBAL_INI_LOOP
00016a 01fb      	MOVW R30,R22
00016b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00016c bf8b      	OUT  RAMPZ,R24
                 
00016d bf8c      	OUT  EIND,R24
                 
                 ;GPIOR0 INITIALIZATION
00016e e0e0      	LDI  R30,__GPIOR0_INIT
00016f bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000170 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000171 bfed      	OUT  SPL,R30
000172 e2e1      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000173 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000174 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000175 e0da      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000176 940c 01c0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0xA00
                 
                 	.CSEG
                 ;
                 ;#include <mega2560.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define NOTE_B0  31
                 ;#define NOTE_C1  33
                 ;#define NOTE_CS1 35
                 ;#define NOTE_D1  37
                 ;#define NOTE_DS1 39
                 ;#define NOTE_E1  41
                 ;#define NOTE_F1  44
                 ;#define NOTE_FS1 46
                 ;#define NOTE_G1  49
                 ;#define NOTE_GS1 52
                 ;#define NOTE_A1  55
                 ;#define NOTE_AS1 58
                 ;#define NOTE_B1  62
                 ;#define NOTE_C2  65
                 ;#define NOTE_CS2 69
                 ;#define NOTE_D2  73
                 ;#define NOTE_DS2 78
                 ;#define NOTE_E2  82
                 ;#define NOTE_F2  87
                 ;#define NOTE_FS2 93
                 ;#define NOTE_G2  98
                 ;#define NOTE_GS2 104
                 ;#define NOTE_A2  110
                 ;#define NOTE_AS2 117
                 ;#define NOTE_B2  123
                 ;#define NOTE_C3  131
                 ;#define NOTE_CS3 139
                 ;#define NOTE_D3  147
                 ;#define NOTE_DS3 156
                 ;#define NOTE_E3  165
                 ;#define NOTE_F3  175
                 ;#define NOTE_FS3 185
                 ;#define NOTE_G3  196
                 ;#define NOTE_GS3 208
                 ;#define NOTE_A3  220
                 ;#define NOTE_AS3 233
                 ;#define NOTE_B3  247
                 ;#define NOTE_C4  262
                 ;#define NOTE_CS4 277
                 ;#define NOTE_D4  294
                 ;#define NOTE_DS4 311
                 ;#define NOTE_E4  330
                 ;#define NOTE_F4  349
                 ;#define NOTE_FS4 370
                 ;#define NOTE_G4  392
                 ;#define NOTE_GS4 415
                 ;#define NOTE_A4  440
                 ;#define NOTE_AS4 466
                 ;#define NOTE_B4  494
                 ;#define NOTE_C5  523
                 ;#define NOTE_CS5 554
                 ;#define NOTE_D5  587
                 ;#define NOTE_DS5 622
                 ;#define NOTE_E5  659
                 ;#define NOTE_F5  698
                 ;#define NOTE_FS5 740
                 ;#define NOTE_G5  784
                 ;#define NOTE_GS5 831
                 ;#define NOTE_A5  880
                 ;#define NOTE_AS5 932
                 ;#define NOTE_B5  988
                 ;#define NOTE_C6  1047
                 ;#define NOTE_CS6 1109
                 ;#define NOTE_D6  1175
                 ;#define NOTE_DS6 1245
                 ;#define NOTE_E6  1319
                 ;#define NOTE_F6  1397
                 ;#define NOTE_FS6 1480
                 ;#define NOTE_G6  1568
                 ;#define NOTE_GS6 1661
                 ;#define NOTE_A6  1760
                 ;#define NOTE_AS6 1865
                 ;#define NOTE_B6  1976
                 ;#define NOTE_C7  2093
                 ;#define NOTE_CS7 2217
                 ;#define NOTE_D7  2349
                 ;#define NOTE_DS7 2489
                 ;#define NOTE_E7  2637
                 ;#define NOTE_F7  2794
                 ;#define NOTE_FS7 2960
                 ;#define NOTE_G7  3136
                 ;#define NOTE_GS7 3322
                 ;#define NOTE_A7  3520
                 ;#define NOTE_AS7 3729
                 ;#define NOTE_B7  3951
                 ;#define NOTE_C8  4186
                 ;#define NOTE_CS8 4435
                 ;#define NOTE_D8  4699
                 ;#define NOTE_DS8 4978
                 ;#define REST      0
                 ;
                 ;int melody[] = {
                 ;
                 ;
                 ;  NOTE_E4,4,  NOTE_E4,4,  NOTE_F4,4,  NOTE_G4,4,//1
                 ;  NOTE_G4,4,  NOTE_F4,4,  NOTE_E4,4,  NOTE_D4,4,
                 ;  NOTE_C4,4,  NOTE_C4,4,  NOTE_D4,4,  NOTE_E4,4,
                 ;  NOTE_E4,-4, NOTE_D4,8,  NOTE_D4,2,
                 ;
                 ;  NOTE_E4,4,  NOTE_E4,4,  NOTE_F4,4,  NOTE_G4,4,//4
                 ;  NOTE_G4,4,  NOTE_F4,4,  NOTE_E4,4,  NOTE_D4,4,
                 ;  NOTE_C4,4,  NOTE_C4,4,  NOTE_D4,4,  NOTE_E4,4,
                 ;  NOTE_D4,-4,  NOTE_C4,8,  NOTE_C4,2,
                 ;
                 ;  NOTE_D4,4,  NOTE_D4,4,  NOTE_E4,4,  NOTE_C4,4,//8
                 ;  NOTE_D4,4,  NOTE_E4,8,  NOTE_F4,8,  NOTE_E4,4, NOTE_C4,4,
                 ;  NOTE_D4,4,  NOTE_E4,8,  NOTE_F4,8,  NOTE_E4,4, NOTE_D4,4,
                 ;  NOTE_C4,4,  NOTE_D4,4,  NOTE_G3,2,
                 ;
                 ;  NOTE_E4,4,  NOTE_E4,4,  NOTE_F4,4,  NOTE_G4,4,//12
                 ;  NOTE_G4,4,  NOTE_F4,4,  NOTE_E4,4,  NOTE_D4,4,
                 ;  NOTE_C4,4,  NOTE_C4,4,  NOTE_D4,4,  NOTE_E4,4,
                 ;  NOTE_D4,-4,  NOTE_C4,8,  NOTE_C4,2
                 ;
                 ;};
                 
                 	.DSEG
                 ;
                 ;int melody2[] = {
                 ;
                 ;  NOTE_B4, 16, NOTE_B5, 16, NOTE_FS5, 16, NOTE_DS5, 16, //1
                 ;  NOTE_B5, 32, NOTE_FS5, -16, NOTE_DS5, 8, NOTE_C5, 16,
                 ;  NOTE_C6, 16, NOTE_G6, 16, NOTE_E6, 16, NOTE_C6, 32, NOTE_G6, -16, NOTE_E6, 8,
                 ;
                 ;  NOTE_B4, 16,  NOTE_B5, 16,  NOTE_FS5, 16,   NOTE_DS5, 16,  NOTE_B5, 32,  //2
                 ;  NOTE_FS5, -16, NOTE_DS5, 8,  NOTE_DS5, 32, NOTE_E5, 32,  NOTE_F5, 32,
                 ;  NOTE_F5, 32,  NOTE_FS5, 32,  NOTE_G5, 32,  NOTE_G5, 32, NOTE_GS5, 32,  NOTE_A5, 16, NOTE_B5, 8
                 ;
                 ;
                 ;};
                 ;
                 ;// sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)
                 ;// there are two values per note (pitch and duration), so for each note there are four bytes
                 ;int notes  = sizeof(melody)/sizeof(melody[0])/2;
                 ;int notes2 = sizeof(melody2)/sizeof(melody2[0])/ 2;
                 ;
                 ;
                 ;// this calculates the duration of a whole note in ms (60s/tempo)*4 beats
                 ;int wholenote = 2105;
                 ;int wholenote2 = 2286;
                 ;
                 ;
                 ;int divider = 0, noteDuration = 0;
                 ;
                 ;
                 ;void tono (float frec)
                 ; 0000 0095 {
                 
                 	.CSEG
                 _tono:
                 ; .FSTART _tono
                 ; 0000 0096     float Cuentas;
                 ; 0000 0097     unsigned int CuentasEnt;
                 ; 0000 0098     DDRB.5=1;   //PB5 de salida (bocina)
000178 940e 0480 	CALL __PUTPARD2
00017a 9724      	SBIW R28,4
00017b 931a      	ST   -Y,R17
00017c 930a      	ST   -Y,R16
                 ;	frec -> Y+6
                 ;	Cuentas -> Y+2
                 ;	CuentasEnt -> R16,R17
00017d 9a25      	SBI  0x4,5
                 ; 0000 0099     Cuentas=500000.0/frec;
                +
00017e 81ee     +LDD R30 , Y + 6
00017f 81ff     +LDD R31 , Y + 6 + 1
000180 8568     +LDD R22 , Y + 6 + 2
000181 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000182 e0a0     +LDI R26 , LOW ( 0x48F42400 )
000183 e2b4     +LDI R27 , HIGH ( 0x48F42400 )
000184 ef84     +LDI R24 , BYTE3 ( 0x48F42400 )
000185 e498     +LDI R25 , BYTE4 ( 0x48F42400 )
                 	__GETD2N 0x48F42400
000186 940e 03d3 	CALL __DIVF21
                +
000188 83ea     +STD Y + 2 , R30
000189 83fb     +STD Y + 2 + 1 , R31
00018a 836c     +STD Y + 2 + 2 , R22
00018b 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 009A     CuentasEnt=Cuentas;                  //Ejemplo 1 CuentasEnt=1702                Ejemplo 2 CuentasEnt=1911
00018c 940e 02c7 	CALL __CFD1U
00018e 018f      	MOVW R16,R30
                 ; 0000 009B     if ((Cuentas-CuentasEnt)>=0.5)
                +
00018f 81aa     +LDD R26 , Y + 2
000190 81bb     +LDD R27 , Y + 2 + 1
000191 818c     +LDD R24 , Y + 2 + 2
000192 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000193 2766      	CLR  R22
000194 2777      	CLR  R23
000195 940e 0300 	CALL __CDF1
000197 940e 0485 	CALL __SWAPD12
000199 940e 0333 	CALL __SUBF12
00019b 01df      	MOVW R26,R30
00019c 01cb      	MOVW R24,R22
                +
00019d e0e0     +LDI R30 , LOW ( 0x3F000000 )
00019e e0f0     +LDI R31 , HIGH ( 0x3F000000 )
00019f e060     +LDI R22 , BYTE3 ( 0x3F000000 )
0001a0 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
0001a1 940e 0418 	CALL __CMPF12
0001a3 f010      	BRLO _0xB
                 ; 0000 009C        CuentasEnt++;                     //Ejemplo 1 CuentasEnt=1703                Ejemplo 2 CuentasEnt=1911
                +
0001a4 5f0f     +SUBI R16 , LOW ( - 1 )
0001a5 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 009D 
                 ; 0000 009E     TCCR1A=0x40;   //Modo de CTC
                 _0xB:
0001a6 e4e0      	LDI  R30,LOW(64)
0001a7 93e0 0080 	STS  128,R30
                 ; 0000 009F     TCCR1B=0x09;   //Sin pre-escalador (CK)
0001a9 e0e9      	LDI  R30,LOW(9)
0001aa 93e0 0081 	STS  129,R30
                 ; 0000 00A0     OCR1AH=(CuentasEnt-1)/256;
0001ac 01f8      	MOVW R30,R16
0001ad 9731      	SBIW R30,1
0001ae 2fef      	MOV  R30,R31
0001af e0f0      	LDI  R31,0
0001b0 93e0 0089 	STS  137,R30
                 ; 0000 00A1     OCR1AL=(CuentasEnt-1)%256;
0001b2 2fe0      	MOV  R30,R16
0001b3 50e1      	SUBI R30,LOW(1)
0001b4 93e0 0088 	STS  136,R30
                 ; 0000 00A2 }
0001b6 8119      	LDD  R17,Y+1
0001b7 8108      	LDD  R16,Y+0
0001b8 962a      	ADIW R28,10
0001b9 9508      	RET
                 ; .FEND
                 ;
                 ;void noTono()
                 ; 0000 00A5 {
                 _noTono:
                 ; .FSTART _noTono
                 ; 0000 00A6    TCCR1A=0;
0001ba e0e0      	LDI  R30,LOW(0)
0001bb 93e0 0080 	STS  128,R30
                 ; 0000 00A7    TCCR1B=0;    //Apaga timer (stop)
0001bd 93e0 0081 	STS  129,R30
                 ; 0000 00A8 }
0001bf 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void){
                 ; 0000 00AB void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 00AC     unsigned int thisNote;
                 ; 0000 00AD     CLKPR=0x80;
                 ;	thisNote -> R16,R17
0001c0 e8e0      	LDI  R30,LOW(128)
0001c1 93e0 0061 	STS  97,R30
                 ; 0000 00AE     CLKPR=0x04;
0001c3 e0e4      	LDI  R30,LOW(4)
0001c4 93e0 0061 	STS  97,R30
                 ; 0000 00AF     PORTC.0 = 1;
0001c6 9a40      	SBI  0x8,0
                 ; 0000 00B0     PORTC.1 = 1;
0001c7 9a41      	SBI  0x8,1
                 ; 0000 00B1 
                 ; 0000 00B2     while(1){
                 _0x10:
                 ; 0000 00B3         if(PINC.0 == 0){
0001c8 9930      	SBIC 0x6,0
0001c9 c02a      	RJMP _0x13
                 ; 0000 00B4             for (thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
                +
0001ca e000     +LDI R16 , LOW ( 0 )
0001cb e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x15:
0001cc 91e0 0b74 	LDS  R30,_notes
0001ce 91f0 0b75 	LDS  R31,_notes+1
0001d0 0fee      	LSL  R30
0001d1 1fff      	ROL  R31
0001d2 170e      	CP   R16,R30
0001d3 071f      	CPC  R17,R31
0001d4 f4f8      	BRSH _0x16
                 ; 0000 00B5                 if(PINC.1==0) break;
0001d5 9b31      	SBIS 0x6,1
0001d6 c01d      	RJMP _0x16
                 ; 0000 00B6                 // calculates the duration of each note
                 ; 0000 00B7                 divider = melody[thisNote + 1];
0001d7 01d8      	MOVW R26,R16
0001d8 0faa      	LSL  R26
0001d9 1fbb      	ROL  R27
                +
0001da 5fae     +SUBI R26 , LOW ( - _melody - ( 2 ) )
0001db 4fb5     +SBCI R27 , HIGH ( - _melody - ( 2 ) )
                 	__ADDW2MN _melody,2
0001dc d045      	RCALL SUBOPT_0x0
                 ; 0000 00B8                 if (divider > 0) {
0001dd f41c      	BRGE _0x18
                 ; 0000 00B9                   // regular note, just proceed
                 ; 0000 00BA                   noteDuration = (wholenote) / divider;
0001de d050      	RCALL SUBOPT_0x1
0001df d054      	RCALL SUBOPT_0x2
                 ; 0000 00BB                 } else if (divider < 0) {
0001e0 c008      	RJMP _0x19
                 _0x18:
0001e1 91a0 0b7d 	LDS  R26,_divider+1
0001e3 23aa      	TST  R26
0001e4 f422      	BRPL _0x1A
                 ; 0000 00BC                   // dotted notes are represented with negative durations!!
                 ; 0000 00BD                   divider=(-1)*divider;
0001e5 d059      	RCALL SUBOPT_0x3
                 ; 0000 00BE                   noteDuration = (wholenote) / divider;
0001e6 d04d      	RCALL SUBOPT_0x2
                 ; 0000 00BF 
                 ; 0000 00C0                   noteDuration=noteDuration*1.5;
0001e7 d061      	RCALL SUBOPT_0x4
0001e8 d069      	RCALL SUBOPT_0x5
                 ; 0000 00C1                 }
                 ; 0000 00C2 
                 ; 0000 00C3                 tono(melody[thisNote]);
                 _0x1A:
                 _0x19:
0001e9 01f8      	MOVW R30,R16
0001ea e0a0      	LDI  R26,LOW(_melody)
0001eb e0ba      	LDI  R27,HIGH(_melody)
0001ec d072      	RCALL SUBOPT_0x6
                 ; 0000 00C4                 delay_ms(noteDuration*0.9);
0001ed d07f      	RCALL SUBOPT_0x7
                 ; 0000 00C5                 noTono();
                 ; 0000 00C6                 delay_ms(noteDuration*0.1);
0001ee d08b      	RCALL SUBOPT_0x8
                 ; 0000 00C7 
                 ; 0000 00C8                 if(PINC.1==0) break;
0001ef 9b31      	SBIS 0x6,1
0001f0 c003      	RJMP _0x16
                 ; 0000 00C9             }
                +
0001f1 5f0e     +SUBI R16 , LOW ( - 2 )
0001f2 4f1f     +SBCI R17 , HIGH ( - 2 )
                 	__ADDWRN 16,17,2
0001f3 cfd8      	RJMP _0x15
                 _0x16:
                 ; 0000 00CA         }
                 ; 0000 00CB 
                 ; 0000 00CC         if(PINC.1==0){
                 _0x13:
0001f4 9931      	SBIC 0x6,1
0001f5 c02a      	RJMP _0x1C
                 ; 0000 00CD             for (thisNote = 0; thisNote < notes2 * 2; thisNote = thisNote + 2) {
                +
0001f6 e000     +LDI R16 , LOW ( 0 )
0001f7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x1E:
0001f8 91e0 0b76 	LDS  R30,_notes2
0001fa 91f0 0b77 	LDS  R31,_notes2+1
0001fc 0fee      	LSL  R30
0001fd 1fff      	ROL  R31
0001fe 170e      	CP   R16,R30
0001ff 071f      	CPC  R17,R31
000200 f4f8      	BRSH _0x1F
                 ; 0000 00CE                 if(PINC.0==0) break;
000201 9b30      	SBIS 0x6,0
000202 c01d      	RJMP _0x1F
                 ; 0000 00CF 
                 ; 0000 00D0                 // calculates the duration of each note
                 ; 0000 00D1                 divider = melody2[thisNote + 1];
000203 01d8      	MOVW R26,R16
000204 0faa      	LSL  R26
000205 1fbb      	ROL  R27
                +
000206 50a6     +SUBI R26 , LOW ( - _melody2 - ( 2 ) )
000207 4fb5     +SBCI R27 , HIGH ( - _melody2 - ( 2 ) )
                 	__ADDW2MN _melody2,2
000208 d019      	RCALL SUBOPT_0x0
                 ; 0000 00D2                 if (divider > 0) {
000209 f41c      	BRGE _0x21
                 ; 0000 00D3                   // regular note, just proceed
                 ; 0000 00D4                   noteDuration = (wholenote2) / divider;
00020a d024      	RCALL SUBOPT_0x1
00020b d079      	RCALL SUBOPT_0x9
                 ; 0000 00D5                 } else if (divider < 0) {
00020c c008      	RJMP _0x22
                 _0x21:
00020d 91a0 0b7d 	LDS  R26,_divider+1
00020f 23aa      	TST  R26
000210 f422      	BRPL _0x23
                 ; 0000 00D6                   // dotted notes are represented with negative durations!!
                 ; 0000 00D7                   divider = (-1)*divider;
000211 d02d      	RCALL SUBOPT_0x3
                 ; 0000 00D8                   noteDuration = (wholenote2) / divider;
000212 d072      	RCALL SUBOPT_0x9
                 ; 0000 00D9                   noteDuration = noteDuration * 1.5; // increases the duration in half for dotted notes
000213 d035      	RCALL SUBOPT_0x4
000214 d03d      	RCALL SUBOPT_0x5
                 ; 0000 00DA                 }
                 ; 0000 00DB 
                 ; 0000 00DC                 tono(melody2[thisNote]);
                 _0x23:
                 _0x22:
000215 01f8      	MOVW R30,R16
000216 efa8      	LDI  R26,LOW(_melody2)
000217 e0ba      	LDI  R27,HIGH(_melody2)
000218 d046      	RCALL SUBOPT_0x6
                 ; 0000 00DD                 delay_ms(noteDuration*0.9);
000219 d053      	RCALL SUBOPT_0x7
                 ; 0000 00DE                 noTono();
                 ; 0000 00DF                 delay_ms(noteDuration*0.1);
00021a d05f      	RCALL SUBOPT_0x8
                 ; 0000 00E0 
                 ; 0000 00E1                 if(PINC.0==0) break;
00021b 9b30      	SBIS 0x6,0
00021c c003      	RJMP _0x1F
                 ; 0000 00E2             }
                +
00021d 5f0e     +SUBI R16 , LOW ( - 2 )
00021e 4f1f     +SBCI R17 , HIGH ( - 2 )
                 	__ADDWRN 16,17,2
00021f cfd8      	RJMP _0x1E
                 _0x1F:
                 ; 0000 00E3         }
                 ; 0000 00E4     }
                 _0x1C:
000220 cfa7      	RJMP _0x10
                 ; 0000 00E5 }
                 _0x25:
000221 cfff      	RJMP _0x25
                 ; .FEND
                 
                 	.DSEG
                 _melody:
000a00           	.BYTE 0xF8
                 _melody2:
000af8           	.BYTE 0x7C
                 _notes:
000b74           	.BYTE 0x2
                 _notes2:
000b76           	.BYTE 0x2
                 _wholenote:
000b78           	.BYTE 0x2
                 _wholenote2:
000b7a           	.BYTE 0x2
                 _divider:
000b7c           	.BYTE 0x2
                 _noteDuration:
000b7e           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
000222 940e 047c 	CALL __GETW1P
000224 93e0 0b7c 	STS  _divider,R30
000226 93f0 0b7d 	STS  _divider+1,R31
000228 91a0 0b7c 	LDS  R26,_divider
00022a 91b0 0b7d 	LDS  R27,_divider+1
00022c 940e 0492 	CALL __CPW02
00022e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
00022f 91e0 0b7c 	LDS  R30,_divider
000231 91f0 0b7d 	LDS  R31,_divider+1
000233 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000234 91a0 0b78 	LDS  R26,_wholenote
000236 91b0 0b79 	LDS  R27,_wholenote+1
000238 940e 0469 	CALL __DIVW21
00023a 93e0 0b7e 	STS  _noteDuration,R30
00023c 93f0 0b7f 	STS  _noteDuration+1,R31
00023e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
00023f dfef      	RCALL SUBOPT_0x1
000240 efaf      	LDI  R26,LOW(65535)
000241 efbf      	LDI  R27,HIGH(65535)
000242 940e 0451 	CALL __MULW12
000244 93e0 0b7c 	STS  _divider,R30
000246 93f0 0b7d 	STS  _divider+1,R31
000248 cfe6      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x4:
000249 91e0 0b7e 	LDS  R30,_noteDuration
00024b 91f0 0b7f 	LDS  R31,_noteDuration+1
00024d 940e 0444 	CALL __CWD1
00024f 940e 0300 	CALL __CDF1
000251 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
                +
000252 e0a0     +LDI R26 , LOW ( 0x3FC00000 )
000253 e0b0     +LDI R27 , HIGH ( 0x3FC00000 )
000254 ec80     +LDI R24 , BYTE3 ( 0x3FC00000 )
000255 e39f     +LDI R25 , BYTE4 ( 0x3FC00000 )
                 	__GETD2N 0x3FC00000
000256 940e 0385 	CALL __MULF12
000258 e7ae      	LDI  R26,LOW(_noteDuration)
000259 e0bb      	LDI  R27,HIGH(_noteDuration)
00025a 940e 02c9 	CALL __CFD1
00025c 93ed      	ST   X+,R30
00025d 93fc      	ST   X,R31
00025e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x6:
00025f 0fee      	LSL  R30
000260 1fff      	ROL  R31
000261 0fae      	ADD  R26,R30
000262 1fbf      	ADC  R27,R31
000263 940e 047c 	CALL __GETW1P
000265 940e 0444 	CALL __CWD1
000267 940e 0300 	CALL __CDF1
000269 01df      	MOVW R26,R30
00026a 01cb      	MOVW R24,R22
00026b df0c      	RCALL _tono
00026c cfdc      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x7:
                +
00026d e6a6     +LDI R26 , LOW ( 0x3F666666 )
00026e e6b6     +LDI R27 , HIGH ( 0x3F666666 )
00026f e686     +LDI R24 , BYTE3 ( 0x3F666666 )
000270 e39f     +LDI R25 , BYTE4 ( 0x3F666666 )
                 	__GETD2N 0x3F666666
000271 940e 0385 	CALL __MULF12
000273 940e 02c7 	CALL __CFD1U
000275 01df      	MOVW R26,R30
000276 940e 0290 	CALL _delay_ms
000278 df41      	RCALL _noTono
000279 cfcf      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
                +
00027a ecad     +LDI R26 , LOW ( 0x3DCCCCCD )
00027b ecbc     +LDI R27 , HIGH ( 0x3DCCCCCD )
00027c ec8c     +LDI R24 , BYTE3 ( 0x3DCCCCCD )
00027d e39d     +LDI R25 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD2N 0x3DCCCCCD
00027e 940e 0385 	CALL __MULF12
000280 940e 02c7 	CALL __CFD1U
000282 01df      	MOVW R26,R30
000283 940c 0290 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
000285 91a0 0b7a 	LDS  R26,_wholenote2
000287 91b0 0b7b 	LDS  R27,_wholenote2+1
000289 940e 0469 	CALL __DIVW21
00028b 93e0 0b7e 	STS  _noteDuration,R30
00028d 93f0 0b7f 	STS  _noteDuration+1,R31
00028f 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000290 9610      	adiw r26,0
000291 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000292 ef8a     +LDI R24 , LOW ( 0xFA )
000293 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000294 9701     +SBIW R24 , 1
000295 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000296 95a8      	wdr
000297 9711      	sbiw r26,1
000298 f7c9      	brne __delay_ms0
                 __delay_ms1:
000299 9508      	ret
                 
                 __ROUND_REPACK:
00029a 2355      	TST  R21
00029b f442      	BRPL __REPACK
00029c 3850      	CPI  R21,0x80
00029d f411      	BRNE __ROUND_REPACK0
00029e ffe0      	SBRS R30,0
00029f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0002a0 9631      	ADIW R30,1
0002a1 1f69      	ADC  R22,R25
0002a2 1f79      	ADC  R23,R25
0002a3 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0002a4 e850      	LDI  R21,0x80
0002a5 2757      	EOR  R21,R23
0002a6 f411      	BRNE __REPACK0
0002a7 935f      	PUSH R21
0002a8 c0ca      	RJMP __ZERORES
                 __REPACK0:
0002a9 3f5f      	CPI  R21,0xFF
0002aa f031      	BREQ __REPACK1
0002ab 0f66      	LSL  R22
0002ac 0c00      	LSL  R0
0002ad 9557      	ROR  R21
0002ae 9567      	ROR  R22
0002af 2f75      	MOV  R23,R21
0002b0 9508      	RET
                 __REPACK1:
0002b1 935f      	PUSH R21
0002b2 2000      	TST  R0
0002b3 f00a      	BRMI __REPACK2
0002b4 c0ca      	RJMP __MAXRES
                 __REPACK2:
0002b5 c0c3      	RJMP __MINRES
                 
                 __UNPACK:
0002b6 e850      	LDI  R21,0x80
0002b7 2e19      	MOV  R1,R25
0002b8 2215      	AND  R1,R21
0002b9 0f88      	LSL  R24
0002ba 1f99      	ROL  R25
0002bb 2795      	EOR  R25,R21
0002bc 0f55      	LSL  R21
0002bd 9587      	ROR  R24
                 
                 __UNPACK1:
0002be e850      	LDI  R21,0x80
0002bf 2e07      	MOV  R0,R23
0002c0 2205      	AND  R0,R21
0002c1 0f66      	LSL  R22
0002c2 1f77      	ROL  R23
0002c3 2775      	EOR  R23,R21
0002c4 0f55      	LSL  R21
0002c5 9567      	ROR  R22
0002c6 9508      	RET
                 
                 __CFD1U:
0002c7 9468      	SET
0002c8 c001      	RJMP __CFD1U0
                 __CFD1:
0002c9 94e8      	CLT
                 __CFD1U0:
0002ca 935f      	PUSH R21
0002cb dff2      	RCALL __UNPACK1
0002cc 3870      	CPI  R23,0x80
0002cd f018      	BRLO __CFD10
0002ce 3f7f      	CPI  R23,0xFF
0002cf f408      	BRCC __CFD10
0002d0 c0a2      	RJMP __ZERORES
                 __CFD10:
0002d1 e156      	LDI  R21,22
0002d2 1b57      	SUB  R21,R23
0002d3 f4aa      	BRPL __CFD11
0002d4 9551      	NEG  R21
0002d5 3058      	CPI  R21,8
0002d6 f40e      	BRTC __CFD19
0002d7 3059      	CPI  R21,9
                 __CFD19:
0002d8 f030      	BRLO __CFD17
0002d9 efef      	SER  R30
0002da efff      	SER  R31
0002db ef6f      	SER  R22
0002dc e77f      	LDI  R23,0x7F
0002dd f977      	BLD  R23,7
0002de c01a      	RJMP __CFD15
                 __CFD17:
0002df 2777      	CLR  R23
0002e0 2355      	TST  R21
0002e1 f0b9      	BREQ __CFD15
                 __CFD18:
0002e2 0fee      	LSL  R30
0002e3 1fff      	ROL  R31
0002e4 1f66      	ROL  R22
0002e5 1f77      	ROL  R23
0002e6 955a      	DEC  R21
0002e7 f7d1      	BRNE __CFD18
0002e8 c010      	RJMP __CFD15
                 __CFD11:
0002e9 2777      	CLR  R23
                 __CFD12:
0002ea 3058      	CPI  R21,8
0002eb f028      	BRLO __CFD13
0002ec 2fef      	MOV  R30,R31
0002ed 2ff6      	MOV  R31,R22
0002ee 2f67      	MOV  R22,R23
0002ef 5058      	SUBI R21,8
0002f0 cff9      	RJMP __CFD12
                 __CFD13:
0002f1 2355      	TST  R21
0002f2 f031      	BREQ __CFD15
                 __CFD14:
0002f3 9576      	LSR  R23
0002f4 9567      	ROR  R22
0002f5 95f7      	ROR  R31
0002f6 95e7      	ROR  R30
0002f7 955a      	DEC  R21
0002f8 f7d1      	BRNE __CFD14
                 __CFD15:
0002f9 2000      	TST  R0
0002fa f40a      	BRPL __CFD16
0002fb d140      	RCALL __ANEGD1
                 __CFD16:
0002fc 915f      	POP  R21
0002fd 9508      	RET
                 
                 __CDF1U:
0002fe 9468      	SET
0002ff c001      	RJMP __CDF1U0
                 __CDF1:
000300 94e8      	CLT
                 __CDF1U0:
000301 9730      	SBIW R30,0
000302 4060      	SBCI R22,0
000303 4070      	SBCI R23,0
000304 f0b1      	BREQ __CDF10
000305 2400      	CLR  R0
000306 f026      	BRTS __CDF11
000307 2377      	TST  R23
000308 f412      	BRPL __CDF11
000309 9400      	COM  R0
00030a d131      	RCALL __ANEGD1
                 __CDF11:
00030b 2e17      	MOV  R1,R23
00030c e17e      	LDI  R23,30
00030d 2011      	TST  R1
                 __CDF12:
00030e f032      	BRMI __CDF13
00030f 957a      	DEC  R23
000310 0fee      	LSL  R30
000311 1fff      	ROL  R31
000312 1f66      	ROL  R22
000313 1c11      	ROL  R1
000314 cff9      	RJMP __CDF12
                 __CDF13:
000315 2fef      	MOV  R30,R31
000316 2ff6      	MOV  R31,R22
000317 2d61      	MOV  R22,R1
000318 935f      	PUSH R21
000319 df8a      	RCALL __REPACK
00031a 915f      	POP  R21
                 __CDF10:
00031b 9508      	RET
                 
                 __SWAPACC:
00031c 934f      	PUSH R20
00031d 01af      	MOVW R20,R30
00031e 01fd      	MOVW R30,R26
00031f 01da      	MOVW R26,R20
000320 01ab      	MOVW R20,R22
000321 01bc      	MOVW R22,R24
000322 01ca      	MOVW R24,R20
000323 2d40      	MOV  R20,R0
000324 2c01      	MOV  R0,R1
000325 2e14      	MOV  R1,R20
000326 914f      	POP  R20
000327 9508      	RET
                 
                 __UADD12:
000328 0fea      	ADD  R30,R26
000329 1ffb      	ADC  R31,R27
00032a 1f68      	ADC  R22,R24
00032b 9508      	RET
                 
                 __NEGMAN1:
00032c 95e0      	COM  R30
00032d 95f0      	COM  R31
00032e 9560      	COM  R22
00032f 5fef      	SUBI R30,-1
000330 4fff      	SBCI R31,-1
000331 4f6f      	SBCI R22,-1
000332 9508      	RET
                 
                 __SUBF12:
000333 935f      	PUSH R21
000334 df81      	RCALL __UNPACK
000335 3890      	CPI  R25,0x80
000336 f149      	BREQ __ADDF129
000337 e850      	LDI  R21,0x80
000338 2615      	EOR  R1,R21
                 
                 __ADDF120:
000339 3870      	CPI  R23,0x80
00033a f121      	BREQ __ADDF128
                 __ADDF121:
00033b 2f57      	MOV  R21,R23
00033c 1b59      	SUB  R21,R25
00033d f12b      	BRVS __ADDF1211
00033e f412      	BRPL __ADDF122
00033f dfdc      	RCALL __SWAPACC
000340 cffa      	RJMP __ADDF121
                 __ADDF122:
000341 3158      	CPI  R21,24
000342 f018      	BRLO __ADDF123
000343 27aa      	CLR  R26
000344 27bb      	CLR  R27
000345 2788      	CLR  R24
                 __ADDF123:
000346 3058      	CPI  R21,8
000347 f028      	BRLO __ADDF124
000348 2fab      	MOV  R26,R27
000349 2fb8      	MOV  R27,R24
00034a 2788      	CLR  R24
00034b 5058      	SUBI R21,8
00034c cff9      	RJMP __ADDF123
                 __ADDF124:
00034d 2355      	TST  R21
00034e f029      	BREQ __ADDF126
                 __ADDF125:
00034f 9586      	LSR  R24
000350 95b7      	ROR  R27
000351 95a7      	ROR  R26
000352 955a      	DEC  R21
000353 f7d9      	BRNE __ADDF125
                 __ADDF126:
000354 2d50      	MOV  R21,R0
000355 2551      	EOR  R21,R1
000356 f072      	BRMI __ADDF127
000357 dfd0      	RCALL __UADD12
000358 f438      	BRCC __ADDF129
000359 9567      	ROR  R22
00035a 95f7      	ROR  R31
00035b 95e7      	ROR  R30
00035c 9573      	INC  R23
00035d f413      	BRVC __ADDF129
00035e c020      	RJMP __MAXRES
                 __ADDF128:
00035f dfbc      	RCALL __SWAPACC
                 __ADDF129:
000360 df43      	RCALL __REPACK
000361 915f      	POP  R21
000362 9508      	RET
                 __ADDF1211:
000363 f7d8      	BRCC __ADDF128
000364 cffb      	RJMP __ADDF129
                 __ADDF127:
000365 1bea      	SUB  R30,R26
000366 0bfb      	SBC  R31,R27
000367 0b68      	SBC  R22,R24
000368 f051      	BREQ __ZERORES
000369 f410      	BRCC __ADDF1210
00036a 9400      	COM  R0
00036b dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
00036c 2366      	TST  R22
00036d f392      	BRMI __ADDF129
00036e 0fee      	LSL  R30
00036f 1fff      	ROL  R31
000370 1f66      	ROL  R22
000371 957a      	DEC  R23
000372 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000373 27ee      	CLR  R30
000374 27ff      	CLR  R31
000375 2766      	CLR  R22
000376 2777      	CLR  R23
000377 915f      	POP  R21
000378 9508      	RET
                 
                 __MINRES:
000379 efef      	SER  R30
00037a efff      	SER  R31
00037b e76f      	LDI  R22,0x7F
00037c ef7f      	SER  R23
00037d 915f      	POP  R21
00037e 9508      	RET
                 
                 __MAXRES:
00037f efef      	SER  R30
000380 efff      	SER  R31
000381 e76f      	LDI  R22,0x7F
000382 e77f      	LDI  R23,0x7F
000383 915f      	POP  R21
000384 9508      	RET
                 
                 __MULF12:
000385 935f      	PUSH R21
000386 df2f      	RCALL __UNPACK
000387 3870      	CPI  R23,0x80
000388 f351      	BREQ __ZERORES
000389 3890      	CPI  R25,0x80
00038a f341      	BREQ __ZERORES
00038b 2401      	EOR  R0,R1
00038c 9408      	SEC
00038d 1f79      	ADC  R23,R25
00038e f423      	BRVC __MULF124
00038f f31c      	BRLT __ZERORES
                 __MULF125:
000390 2000      	TST  R0
000391 f33a      	BRMI __MINRES
000392 cfec      	RJMP __MAXRES
                 __MULF124:
000393 920f      	PUSH R0
000394 931f      	PUSH R17
000395 932f      	PUSH R18
000396 933f      	PUSH R19
000397 934f      	PUSH R20
000398 2711      	CLR  R17
000399 2722      	CLR  R18
00039a 2799      	CLR  R25
00039b 9f68      	MUL  R22,R24
00039c 01a0      	MOVW R20,R0
00039d 9f8f      	MUL  R24,R31
00039e 2d30      	MOV  R19,R0
00039f 0d41      	ADD  R20,R1
0003a0 1f59      	ADC  R21,R25
0003a1 9f6b      	MUL  R22,R27
0003a2 0d30      	ADD  R19,R0
0003a3 1d41      	ADC  R20,R1
0003a4 1f59      	ADC  R21,R25
0003a5 9f8e      	MUL  R24,R30
0003a6 d027      	RCALL __MULF126
0003a7 9fbf      	MUL  R27,R31
0003a8 d025      	RCALL __MULF126
0003a9 9f6a      	MUL  R22,R26
0003aa d023      	RCALL __MULF126
0003ab 9fbe      	MUL  R27,R30
0003ac d01d      	RCALL __MULF127
0003ad 9faf      	MUL  R26,R31
0003ae d01b      	RCALL __MULF127
0003af 9fae      	MUL  R26,R30
0003b0 0d11      	ADD  R17,R1
0003b1 1f29      	ADC  R18,R25
0003b2 1f39      	ADC  R19,R25
0003b3 1f49      	ADC  R20,R25
0003b4 1f59      	ADC  R21,R25
0003b5 2fe3      	MOV  R30,R19
0003b6 2ff4      	MOV  R31,R20
0003b7 2f65      	MOV  R22,R21
0003b8 2f52      	MOV  R21,R18
0003b9 914f      	POP  R20
0003ba 913f      	POP  R19
0003bb 912f      	POP  R18
0003bc 911f      	POP  R17
0003bd 900f      	POP  R0
0003be 2366      	TST  R22
0003bf f02a      	BRMI __MULF122
0003c0 0f55      	LSL  R21
0003c1 1fee      	ROL  R30
0003c2 1fff      	ROL  R31
0003c3 1f66      	ROL  R22
0003c4 c002      	RJMP __MULF123
                 __MULF122:
0003c5 9573      	INC  R23
0003c6 f24b      	BRVS __MULF125
                 __MULF123:
0003c7 ded2      	RCALL __ROUND_REPACK
0003c8 915f      	POP  R21
0003c9 9508      	RET
                 
                 __MULF127:
0003ca 0d10      	ADD  R17,R0
0003cb 1d21      	ADC  R18,R1
0003cc 1f39      	ADC  R19,R25
0003cd c002      	RJMP __MULF128
                 __MULF126:
0003ce 0d20      	ADD  R18,R0
0003cf 1d31      	ADC  R19,R1
                 __MULF128:
0003d0 1f49      	ADC  R20,R25
0003d1 1f59      	ADC  R21,R25
0003d2 9508      	RET
                 
                 __DIVF21:
0003d3 935f      	PUSH R21
0003d4 dee1      	RCALL __UNPACK
0003d5 3870      	CPI  R23,0x80
0003d6 f421      	BRNE __DIVF210
0003d7 2011      	TST  R1
                 __DIVF211:
0003d8 f40a      	BRPL __DIVF219
0003d9 cf9f      	RJMP __MINRES
                 __DIVF219:
0003da cfa4      	RJMP __MAXRES
                 __DIVF210:
0003db 3890      	CPI  R25,0x80
0003dc f409      	BRNE __DIVF218
                 __DIVF217:
0003dd cf95      	RJMP __ZERORES
                 __DIVF218:
0003de 2401      	EOR  R0,R1
0003df 9408      	SEC
0003e0 0b97      	SBC  R25,R23
0003e1 f41b      	BRVC __DIVF216
0003e2 f3d4      	BRLT __DIVF217
0003e3 2000      	TST  R0
0003e4 cff3      	RJMP __DIVF211
                 __DIVF216:
0003e5 2f79      	MOV  R23,R25
0003e6 931f      	PUSH R17
0003e7 932f      	PUSH R18
0003e8 933f      	PUSH R19
0003e9 934f      	PUSH R20
0003ea 2411      	CLR  R1
0003eb 2711      	CLR  R17
0003ec 2722      	CLR  R18
0003ed 2733      	CLR  R19
0003ee 2744      	CLR  R20
0003ef 2755      	CLR  R21
0003f0 e290      	LDI  R25,32
                 __DIVF212:
0003f1 17ae      	CP   R26,R30
0003f2 07bf      	CPC  R27,R31
0003f3 0786      	CPC  R24,R22
0003f4 0741      	CPC  R20,R17
0003f5 f030      	BRLO __DIVF213
0003f6 1bae      	SUB  R26,R30
0003f7 0bbf      	SBC  R27,R31
0003f8 0b86      	SBC  R24,R22
0003f9 0b41      	SBC  R20,R17
0003fa 9408      	SEC
0003fb c001      	RJMP __DIVF214
                 __DIVF213:
0003fc 9488      	CLC
                 __DIVF214:
0003fd 1f55      	ROL  R21
0003fe 1f22      	ROL  R18
0003ff 1f33      	ROL  R19
000400 1c11      	ROL  R1
000401 1faa      	ROL  R26
000402 1fbb      	ROL  R27
000403 1f88      	ROL  R24
000404 1f44      	ROL  R20
000405 959a      	DEC  R25
000406 f751      	BRNE __DIVF212
000407 01f9      	MOVW R30,R18
000408 2d61      	MOV  R22,R1
000409 914f      	POP  R20
00040a 913f      	POP  R19
00040b 912f      	POP  R18
00040c 911f      	POP  R17
00040d 2366      	TST  R22
00040e f032      	BRMI __DIVF215
00040f 0f55      	LSL  R21
000410 1fee      	ROL  R30
000411 1fff      	ROL  R31
000412 1f66      	ROL  R22
000413 957a      	DEC  R23
000414 f243      	BRVS __DIVF217
                 __DIVF215:
000415 de84      	RCALL __ROUND_REPACK
000416 915f      	POP  R21
000417 9508      	RET
                 
                 __CMPF12:
000418 2399      	TST  R25
000419 f09a      	BRMI __CMPF120
00041a 2377      	TST  R23
00041b f042      	BRMI __CMPF121
00041c 1797      	CP   R25,R23
00041d f048      	BRLO __CMPF122
00041e f429      	BRNE __CMPF121
00041f 17ae      	CP   R26,R30
000420 07bf      	CPC  R27,R31
000421 0786      	CPC  R24,R22
000422 f020      	BRLO __CMPF122
000423 f031      	BREQ __CMPF123
                 __CMPF121:
000424 9498      	CLZ
000425 9488      	CLC
000426 9508      	RET
                 __CMPF122:
000427 9498      	CLZ
000428 9408      	SEC
000429 9508      	RET
                 __CMPF123:
00042a 9418      	SEZ
00042b 9488      	CLC
00042c 9508      	RET
                 __CMPF120:
00042d 2377      	TST  R23
00042e f7c2      	BRPL __CMPF122
00042f 1797      	CP   R25,R23
000430 f398      	BRLO __CMPF121
000431 f7a9      	BRNE __CMPF122
000432 17ea      	CP   R30,R26
000433 07fb      	CPC  R31,R27
000434 0768      	CPC  R22,R24
000435 f388      	BRLO __CMPF122
000436 f399      	BREQ __CMPF123
000437 cfec      	RJMP __CMPF121
                 
                 __ANEGW1:
000438 95f1      	NEG  R31
000439 95e1      	NEG  R30
00043a 40f0      	SBCI R31,0
00043b 9508      	RET
                 
                 __ANEGD1:
00043c 95f0      	COM  R31
00043d 9560      	COM  R22
00043e 9570      	COM  R23
00043f 95e1      	NEG  R30
000440 4fff      	SBCI R31,-1
000441 4f6f      	SBCI R22,-1
000442 4f7f      	SBCI R23,-1
000443 9508      	RET
                 
                 __CWD1:
000444 2f6f      	MOV  R22,R31
000445 0f66      	ADD  R22,R22
000446 0b66      	SBC  R22,R22
000447 2f76      	MOV  R23,R22
000448 9508      	RET
                 
                 __MULW12U:
000449 9ffa      	MUL  R31,R26
00044a 2df0      	MOV  R31,R0
00044b 9feb      	MUL  R30,R27
00044c 0df0      	ADD  R31,R0
00044d 9fea      	MUL  R30,R26
00044e 2de0      	MOV  R30,R0
00044f 0df1      	ADD  R31,R1
000450 9508      	RET
                 
                 __MULW12:
000451 d01c      	RCALL __CHKSIGNW
000452 dff6      	RCALL __MULW12U
000453 f40e      	BRTC __MULW121
000454 dfe3      	RCALL __ANEGW1
                 __MULW121:
000455 9508      	RET
                 
                 __DIVW21U:
000456 2400      	CLR  R0
000457 2411      	CLR  R1
000458 e190      	LDI  R25,16
                 __DIVW21U1:
000459 0faa      	LSL  R26
00045a 1fbb      	ROL  R27
00045b 1c00      	ROL  R0
00045c 1c11      	ROL  R1
00045d 1a0e      	SUB  R0,R30
00045e 0a1f      	SBC  R1,R31
00045f f418      	BRCC __DIVW21U2
000460 0e0e      	ADD  R0,R30
000461 1e1f      	ADC  R1,R31
000462 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000463 60a1      	SBR  R26,1
                 __DIVW21U3:
000464 959a      	DEC  R25
000465 f799      	BRNE __DIVW21U1
000466 01fd      	MOVW R30,R26
000467 01d0      	MOVW R26,R0
000468 9508      	RET
                 
                 __DIVW21:
000469 d004      	RCALL __CHKSIGNW
00046a dfeb      	RCALL __DIVW21U
00046b f40e      	BRTC __DIVW211
00046c dfcb      	RCALL __ANEGW1
                 __DIVW211:
00046d 9508      	RET
                 
                 __CHKSIGNW:
00046e 94e8      	CLT
00046f fff7      	SBRS R31,7
000470 c002      	RJMP __CHKSW1
000471 dfc6      	RCALL __ANEGW1
000472 9468      	SET
                 __CHKSW1:
000473 ffb7      	SBRS R27,7
000474 c006      	RJMP __CHKSW2
000475 95a0      	COM  R26
000476 95b0      	COM  R27
000477 9611      	ADIW R26,1
000478 f800      	BLD  R0,0
000479 9403      	INC  R0
00047a fa00      	BST  R0,0
                 __CHKSW2:
00047b 9508      	RET
                 
                 __GETW1P:
00047c 91ed      	LD   R30,X+
00047d 91fc      	LD   R31,X
00047e 9711      	SBIW R26,1
00047f 9508      	RET
                 
                 __PUTPARD2:
000480 939a      	ST   -Y,R25
000481 938a      	ST   -Y,R24
000482 93ba      	ST   -Y,R27
000483 93aa      	ST   -Y,R26
000484 9508      	RET
                 
                 __SWAPD12:
000485 2e18      	MOV  R1,R24
000486 2f86      	MOV  R24,R22
000487 2d61      	MOV  R22,R1
000488 2e19      	MOV  R1,R25
000489 2f97      	MOV  R25,R23
00048a 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00048b 2e1b      	MOV  R1,R27
00048c 2fbf      	MOV  R27,R31
00048d 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00048e 2e1a      	MOV  R1,R26
00048f 2fae      	MOV  R26,R30
000490 2de1      	MOV  R30,R1
000491 9508      	RET
                 
                 __CPW02:
000492 2400      	CLR  R0
000493 160a      	CP   R0,R26
000494 060b      	CPC  R0,R27
000495 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega2560 register use summary:
r0 :  40 r1 :  35 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  16 r17:  19 r18:  12 r19:  12 r20:  22 r21:  62 r22:  57 r23:  48 
r24:  39 r25:  40 r26:  60 r27:  42 r28:   3 r29:   1 r30: 102 r31:  65 
x  :   7 y  :  20 z  :   7 
Registers used: 21 out of 35 (60.0%)

ATmega2560 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  19 add   :  11 
adiw  :   4 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  14 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   2 brmi  :   9 brne  :  16 brpl  :   9 brsh  :   2 brtc  :   3 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   1 call  :  24 
cbi   :   0 cbr   :   0 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  27 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :  10 
cp    :   8 cpc   :  10 cpi   :  15 cpse  :   0 dec   :   9 des   :   0 
eicall:   0 eijmp :   0 elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   3 jmp   :  59 
ld    :   2 ldd   :  10 ldi   :  66 lds   :  16 lpm   :   7 lsl   :  17 
lsr   :   2 mov   :  42 movw  :  25 mul   :  12 muls  :   0 mulsu :   0 
neg   :   4 nop   :   0 or    :   0 ori   :   0 out   :   8 pop   :  18 
push  :  17 rcall :  49 ret   :  38 reti  :   0 rjmp  :  43 rol   :  32 
ror   :  12 sbc   :   8 sbci  :  13 sbi   :   3 sbic  :   2 sbis  :   4 
sbiw  :   9 sbr   :   1 sbrc  :   0 sbrs  :   3 sec   :   4 seh   :   0 
sei   :   0 sen   :   0 ser   :   8 ses   :   0 set   :   3 sev   :   0 
sez   :   1 sleep :   0 spm   :   0 st    :  11 std   :   4 sts   :  18 
sub   :   5 subi  :   9 swap  :   0 tst   :  19 wdr   :   1 
Instructions used: 71 out of 119 (59.7%)

ATmega2560 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00092c   1930    418   2348  262144   0.9%
[.dseg] 0x000200 0x000b80      0    384    384    8192   4.7%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 4 warnings
